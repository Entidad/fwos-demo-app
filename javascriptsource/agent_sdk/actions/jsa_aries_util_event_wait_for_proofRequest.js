// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
//import{ProofState,ProofEventTypes}from"@aries-framework/core";
import{filter,firstValueFrom,merge,first,timeout}from"rxjs";
// END EXTRA CODE

/**
 *   const proofRequest = agent.events
 *     .observable<ProofStateChangedEvent>(ProofEventTypes.ProofStateChanged)
 *     .pipe(
 *       filter((event) => event.payload.proofRecord.state === ProofState.RequestReceived),
 *       filter((event) => event.payload.proofRecord.connectionId === connectionId)
 *     )
 * @param {string} agent_key
 * @param {string} connectionId - string
 * @returns {Promise.<string>}
 */
export async function jsa_aries_util_event_wait_for_proofRequest(agent_key, connectionId) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		const proofRequest=agent.events
		.observable/*<ProofStateChangedEvent>*/(ProofEventTypes.ProofStateChanged)
		.pipe(
			filter((event) => event.payload.proofRecord.state === ProofState.RequestReceived),
			filter((event) => event.payload.proofRecord.connectionId === connectionId)
		);
		return Promise.resolve(JSON.stringify(proofRequest,0,2));
	}catch(e){
		return Promise.reject(e.toString());
	}
	throw new Error("JavaScript action was not implemented");
	// END USER CODE
}
