// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import support from"../support/entidad";
import{CredentialState}from"@aries-framework/core";
import{filter,firstValueFrom,merge,first,timeout}from"rxjs";
// END EXTRA CODE

/**
 *   const eventPromise = firstValueFrom(
 *     merge(credentialOffer, proofRequest).pipe(
 *       first(),
 *       // We allow 15 seconds to receive a credential offer or proof request
 *       timeout(15 * 1000)
 *     )
 *   )
 * @param {string} agent_key
 * @param {string} credentialOffer - json
 * @param {string} proofRequest - json
 * @returns {Promise.<string>}
 */
export async function jsa_aries_util_event_wait_for_evenpromise(agent_key, credentialOffer, proofRequest) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");
		if(credentialOffer==null)return Promise.reject("Invalid credentialOffer parameter");
		try{
			credentialOffer=JSON.parse(credentialOffer);
		}catch(e){
			return Promise.reject(e.toString());
		}
		if(proofRequest==null)return Promise.reject("Invalid proofRequest parameter");
		try{
			proofRequest=JSON.parse(proofRequest);
		}catch(e){
			return Promise.reject(e.toString());
		}
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		const eventPromise = firstValueFrom(
			merge(credentialOffer, proofRequest).pipe(
			first(),
			// We allow 15 seconds to receive a credential offer or proof request
			timeout(15 * 1000)
			)
		)
		return Promise.resolve(JSON.stringify(await eventPromise,0,2));
	}catch(e){
		return Promise.reject(e.toString());
	}
	throw new Error("JavaScript action was not implemented");
	// END USER CODE
}
