// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
import "../shim.js";
import support from"../support/entidad";
import { Agent, MessageReceiver } from  '@credo-ts/core';
import { parseMessageType } from  '@credo-ts/core';
import { canHandleMessageType } from '@credo-ts/core/build/utils/messageType';
import { CredoError } from  '@credo-ts/core';
import { ProblemReportMessage } from  '@credo-ts/core';
import { ProblemReportReason } from  '@credo-ts/core';
import { OutboundMessageContext } from  '@credo-ts/core';
// END EXTRA CODE

/**
 * @param {string} agent_key
 * @param {string} message
 * @param {string} plaintextMessage - json
 * @param {string} connectionId
 * @returns {Promise.<void>}
 */
export async function jsa_aries_agent_messagereceiver_sendProblemReportMessage(agent_key, message, plaintextMessage, connectionId) {
	// BEGIN USER CODE
	try{
		if(agent_key==null)return Promise.reject("Invalid agent_key parameter");
		let agent=support.cache.get(agent_key);
		if(agent==null)return Promise.reject("Agent not found in cache");
		let agentContext=agent.context;
		let connection=await agent.connections.findById(connectionId)
    	const messageType = parseMessageType(plaintextMessage['@type']);
		if (canHandleMessageType(ProblemReportMessage, messageType)) {
			return Promise.reject(`Not sending problem report in response to problem report: ${message}`)
		}
		const problemReportMessage = new ProblemReportMessage({
			description: {
				en: message,
				code: ProblemReportReason.MessageParseFailure,
			},
		})
		problemReportMessage.setThread({
			parentThreadId: plaintextMessage['@id'],
		});
		const outboundMessageContext = new OutboundMessageContext(problemReportMessage, { agentContext, connection })
		if (outboundMessageContext) {
			await agent.messageSender.sendMessage(outboundMessageContext)
			return(Promise.resolve());
		}else{
			throw("failed to created outboundMessageContext")
		}
	}catch(e){
		return Promise.reject(e.toString());
	}
	// END USER CODE
}
